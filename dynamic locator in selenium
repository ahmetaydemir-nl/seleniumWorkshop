package com.techproed.pages;

import com.techproed.utilities.BrowserUtils;
import com.techproed.utilities.Driver;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public abstract class BasePage {




    public BasePage(){
        PageFactory.initElements(Driver.get(),this);
    }

    public abstract boolean checkTitle();

    String menuElemetn="moda";

    String path="//span[contains(*,'"+menuElemetn+"')]";

    //Driver.get().findElement(By.xpath(path));
    By ustMenu=By.xpath("//span[contains(*,'"+menuElemetn+"')]");


    /*
    method oluşturalım
    return type=WebElement
    parameter String (moda, Elektornik, vs)
     */

    public WebElement getNavMenu(String menuName){ //Moda, Elektronkik,

        //burada ortak bir nokta yakaliyoruz.
        //contains(.,'"+menuName+"') nokta(.) veya (*) kullanabilirz.
        By ustMenu=By.xpath("//span[contains(.,'"+menuName+"')]");

        WebElement element=Driver.get().findElement(ustMenu);

        return element;
    }





    public void navBar(String menu) throws InterruptedException {

        Thread.sleep(5000);

        WebElement element=Driver.get().findElement(By.xpath("//span[contains(*,'"+menu+"')]"));
        element.click();

    }

    /*
    method oluşturacaz
    return = List<String>
    parameter= List<WebElemt>

     */

    public List<String> getElementsText(List<WebElement> list) {
        List<String> elemTexts = new ArrayList<>();

        for (WebElement el : list) {
            elemTexts.add(el.getText());
        }
        return elemTexts;
    }


    /*
    method oluşturalım
    return boolean
    parameter String = Moda Ev ya
     */

    public boolean checkNavBar(String menu) throws InterruptedException {

        WebElement element=Driver.get().findElement(By.xpath("//span[contains(*,'"+menu+"')]"));
        element.click();

        Thread.sleep(3000);
        List<WebElement> tumLinkler = Driver.get().findElements(By.xpath("//*[@class='sf-ChildMenuItems-3VA7f']//a"));

        List<String> subMenuText = getElementsText(tumLinkler);

        System.out.println(subMenuText);

        Random random=new Random();

        int index=random.nextInt(subMenuText.size());
        System.out.println(index);

        String subTitle=subMenuText.get(index); //get(index)

        System.out.println(subTitle);

        navBar(menu,subTitle);

        Thread.sleep(3000);

        if(Driver.get().getTitle().contains(subTitle)){
            return true;
        }else{

            System.out.println("Beklenilen Başlık: "+subTitle);
            System.out.println("Gelen Başlık"+Driver.get().getTitle());
            return false;
        }

    }

    /*
    method oluşturup alt menulere tıklayalım
    returnType= void
    parameter= String, String
     */
    public void navBar(String menuName, String subMenu) throws InterruptedException { //Moda, Elektronkik,

        WebElement element=Driver.get().findElement(By.xpath("//span[contains(*,'"+menuName+"')]"));
        WebElement altElm=Driver.get().findElement(By.partialLinkText(subMenu));
        Actions actions= new Actions(Driver.get());
        //burdaki metodlari try-catch icine aldik
        //Try zincirinde oarent-child iliskisi var.Bundan dolayi
        //Exception ==>Throwable gibi olmali
         try {
           element.click();
        }catch (Exception e) {
             //       e.printStackTrace();
             // Buna normal click ile tiklamak istiyorum
             actions.click(element).perform();
        }catch (Throwable t){
             // e.printStackTrace();
             BrowserUtils.clickWithJS(element);
         }

//        JavascriptExecutor js = (JavascriptExecutor) Driver.get();
//        //butraya istedigimiz kadar web element koyabiliriz.
//        //altElm, element gibi webelementleri hepsinin bir array icine atiyor.
//        //executeScript ise => arguments[0] ==> altElm esit olmus oluyor.
//        ((JavascriptExecutor) Driver.get()).executeScript("arguments[0].click();", altElm, element); //altElm.click


        try{
            altElm.click();
        }catch (Exception e) {
          // e.printStackTrace();
            actions.click(altElm).perform();
        } catch (Throwable t) {
            //casting yaparak java script objesi olusturuyoruz.
            JavascriptExecutor js = (JavascriptExecutor) Driver.get();
            //butraya istedigimiz kadar web element koyabiliriz.
            //altElm, element gibi webelementleri hepsinin bir array icine atiyor.
            //executeScript ise => arguments[0] ==> altElm esit olmus oluyor.
            ((JavascriptExecutor) Driver.get()).executeScript("arguments[0].click();", altElm, element); //altElm.click

        }

    }


}

package tests.pratikdersi;

import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.Test;
import utilities.TestBase;

import java.util.ArrayList;
import java.util.List;

public class AmazonSearchTest extends TestBase {

    /*
    1.kullanici amazon sayfasina gider
    2.search input box a kelime girer
    3.tahmini sonuclarin aranan kelimeyi icerdigi test edilir
    4.tahmin sayisinin en fazla 10 oldugu test edilir

     */

    @Test
    public void test01(){
        driver.get("https://www.amazon.com");
        WebElement aramaKutusu = driver.findElement(By.cssSelector("#twotabsearchtextbox"));
        aramaKutusu.sendKeys("computer");
        List<WebElement> suggestions = driver.findElements(By.cssSelector("#suggestions>div"));

        //4.tahmin sayisinin en fazla 10 oldugu test edilir
        Assert.assertTrue(suggestions.size()<11 && suggestions.size()>1);

        /*
        Burada int i String.valuof ile String yaptik
        int a =123;
        aramaKutusu.sendKeys(String.valueOf(a));
        aramaKutusu.sendKeys(String.valueOf(123));
         */

    }

    @Test
    public void test02(){
        driver.get("https://www.amazon.com");

        //browser boyutlarini nasil ayarlariz
        Dimension dimension = new Dimension(1020, 1000);
        driver.manage().window().setSize(dimension);

        WebElement aramaKutusu = driver.findElement(By.cssSelector("#twotabsearchtextbox"));

        String sorgu = "bilgisayar";
        aramaKutusu.sendKeys(sorgu);

        List<WebElement> suggestions = driver.findElements(By.cssSelector("#suggestions>div"));

        //tahmini sonuclarin aranan kelimeyi icerdigi test edilir
        List<String> liste= getElementText(suggestions);
        System.out.println(liste); //[bilgisayar, bilgisayar laptop, bilgisayar kasa, bilgisayar masa]
        Assert.assertTrue(checkSuggestion(liste, sorgu));

        //for loop bbyleydi asagida checkSuggestion(liste, sorgu) metod yazdik ve bunu sildik
//        for(String list: liste){
//            Assert.assertTrue(list.contains("bilgisayar"));
//        }
    }

    /*
    Bir metodla     return = type List
                    parametre =List<Webelement>
     */
    //bu metdoun return type liste, gettext teker teker alip listeye atacak.
    public List<String> getElementText(List<WebElement> elements){

        List<String> liste = new ArrayList<>(); //liste.size()=0

        for(WebElement elem: elements){
            liste.add(elem.getText());
        }
        return liste;
    }

    //Assert icin bir metod yazacagiz. parametre olarak
    public boolean checkSuggestion(List<String> liste, String sorgu){
        for(String list: liste){
            if(!list.contains(sorgu)){
                return false;
            }
        }
        return true; //liste for dongusune girmezse true dondurur
    }
        /*
     ?=> Framework oluştururken nelere dikkat edersini?
     - desing pattern (P0M)
    - sürdürülebilir
    - tekrar kullanılabilir
    - OOP konseptini kullanarak oluşturlması
    - Data local makinanızdan isole lazım
     */

            /*
        method yazacaz nav bar için
        parameter olarak 2 tane String alacak
        1. String ile hoverover, 2. ile submenulere tıklayacak
         */
}

